/*

        Jalon v4.5 (static) : selection d'elements de liste en vue d'action par lot
                              ou de sélection multiple.

*/


function setBatchSelect( target, noBatch ) {

    var $target = Foundation.utils.S( '#' + target );
    var $tableHead = $target.find( 'thead' );
    var $tableBody = $target.find( 'tbody' );
    var $batchButton = $target.find( 'tfoot a.dropdown' );
    var checkBoxName = $target.find( 'thead .checkall input[type=checkbox]' ).attr( 'role' );
    var $cbAll = $tableHead.find( '.checkall input[role="' + checkBoxName + '"]' );
    var $cbItems = $tableBody.find( 'input[name="' + checkBoxName + '"]' );

    var $mailAnnounce = ( ( target === "js-createAnnounce" ) || ( target === "js-mod-annonce" ) ) ? Foundation.utils.S( '#mailAnnounce' ) : false;
    var isBatch = ( typeof noBatch === "undefined" ) ? true : !noBatch;

    // Bascule d'etat des controles d'actions par lot / submit
    function setBatchButtonActive( state ) {

        if ( state ) {
            $batchButton.removeClass( 'inactive' );
            switchButtonEnabledState( $target.find( '.formControls > [type="submit"]' ), true );
        } else {
            $batchButton.addClass( 'inactive' );
            switchButtonEnabledState( $target.find( '.formControls > [type="submit"]' ), false );
        }

    }


    /*
        Initialisation
    */

    if ( isBatch ) {

        $cbItems.prop( 'checked', false );
        $cbAll.prop( 'checked', false );

        $batchButton.on( 'click', function( event ) {

            if ( $( this ).hasClass( 'inactive' ) ) {
                event.preventDefault( );
                event.stopPropagation( );
            }

        } );

    } else if ( $mailAnnounce ) {

        var cbCheckedItemsNumber = $tableBody.find( 'input[type=checkbox]:checked' ).length;

        if ( $cbItems.length === cbCheckedItemsNumber ) {
            $cbAll.prop( 'indeterminate', false ).prop( 'checked', true );
            $mailAnnounce.prop( 'disabled', false );
        } else if ( !cbCheckedItemsNumber ) {
            $cbAll.prop( 'indeterminate', false ).prop( 'checked', false );
            $mailAnnounce.prop( 'disabled', true );
        } else {
            $cbAll.prop( 'indeterminate', true ).prop( 'checked', false );
            $mailAnnounce.prop( 'disabled', false );
        }

    } else {

        if ( $cbItems.length === $tableBody.find( 'input[type=checkbox]:checked' ).length ) {
            $cbAll.prop( 'indeterminate', false ).prop( 'checked', true );
        } else {
            $cbAll.prop( 'indeterminate', true ).prop( 'checked', false );
        }

    }


    /*
        Selection / deselection de l'ensemble
    */

    if ( $cbItems.length > 0 ) {

        $cbAll.on( 'click', function( e ) {

            e.stopPropagation( );
            var allChecked = $cbAll.prop( 'checked' );

            $cbItems.prop( 'checked', allChecked );

            if ( isBatch ) {

                if ( allChecked ) {
                    setBatchButtonActive( true );
                } else {
                    setBatchButtonActive( false );
                }

            } else if ( $mailAnnounce ) {

                var cbCheckedItemsNumber = $tableBody.find( 'input[type=checkbox]:checked' ).length;

                if ( allChecked ) {
                    $mailAnnounce.prop( 'disabled', false );
                } else {
                    $mailAnnounce.prop( 'disabled', true );
                }

            }

        } );

    } else {
        $cbAll.prop( 'disabled', true );
    }


    /*
        Selection / deselection d'un element
    */

    $tableBody.on( 'click', 'input[type=checkbox]', function( event ) {

        event.stopPropagation( );
        var checkedNbr = $tableBody.find( 'input[type=checkbox]:checked' ).length;

        if ( $cbItems.length === checkedNbr ) {

            $cbItems.prop( 'checked', true );
            $cbAll.prop( 'indeterminate', false ).prop( 'checked', true );
            if ( isBatch ) {
                setBatchButtonActive( true );
            } else if ( $mailAnnounce ) {
                $mailAnnounce.prop( 'disabled', false );
            }

        } else if ( checkedNbr === 0 ) {

            $cbItems.prop( 'checked', false );
            $cbAll.prop( 'indeterminate', false ).prop( 'checked', false );
            if ( isBatch ) {
                setBatchButtonActive( false );
            } else if ( $mailAnnounce ) {
                $mailAnnounce.prop( 'disabled', true );
            }

        } else {

            $cbAll.prop( 'indeterminate', true ).prop( 'checked', false );
            if ( isBatch ) {
                setBatchButtonActive( true );
            } else if ( $mailAnnounce ) {
                $mailAnnounce.prop( 'disabled', false );
            }

        }

    } );

}



/*

        Jalon v4.5 (static) : etiquetage et traitements par lot


/***************************************************************************************************

        Filtrage d'une liste d'elements lors de la selection d'etiquettes

*/

function setTagFilter( inPopup ) {

    inReveal = ( typeof inPopup === "undefined" ) ? false : true;

    Foundation.utils.S( '#js-tag_filter' ).on( 'click', 'li > a.filter-button', function( event ) {

        event.preventDefault( );
        event.stopPropagation( );

        if ( !isRefreshing ) {

            // Verrouilage
            isRefreshing = true;

            // Init. cibles
            var $tagButton = $( this );
            var $updateTarget, $title, $submitButton;
            if ( inReveal ) {
                $updateTarget = Foundation.utils.S( '#js-popup-update_target' );
                $title = Foundation.utils.S( '#js-popup-update_title' );
                $submitButton = $updateTarget.parent( 'form' ).find( 'button[type=submit]' );
            } else {
                $updateTarget = Foundation.utils.S( '#js-update_target' );
                $title = Foundation.utils.S( '#js-update_title' );
                $submitButton = false;
            }

            // Mise a jour de l'etat
            updateTagButtonState( $tagButton );

            // Titre initial
            var titleOrgHtml = $title.html( );

            // Parametres du "load"
            var subjects = [ ];
            var updateUrl = $updateTarget.data( 'href' );
            Foundation.utils.S( '#js-tag_filter > li > a.selected' ).each( function( index ) {
                subjects.push( $( this ).attr( 'id' ) );
                //subjects.push( encodeURIComponent( $( this ).attr( 'id' ) ) );
                //subjects.push( decodeURIComponent( $( this ).attr( 'id' ) ) );
            } );

            // Requete Ajax + effets + maj bouton
            $title.html( MSG_LOADING );
            $updateTarget.fadeTo( 200, 0.33, function( ) {
                $updateTarget.load( updateUrl, 'subject=' + subjects.join( ), function( ) {
                    $updateTarget.fadeTo( 200, 1, function( ) {
                        // Restauration titre
                        $title.html( titleOrgHtml );
                        // Forcage de la perte du focus pour le bouton (chgmt de couleur)
                        $tagButton.blur( );
                        // Desactivation du bouton "submit" le cas echeant.
                        if ( $submitButton ) {
                            $submitButton.prop( 'disabled', true );
                        }
                        // Deverrouilage
                        isRefreshing = false;
                    } );
                } );
            } );
        }

    } );
}



/***************************************************************************************************

        Creation / suppression d'etiquettes et etiquetage d'une ressource

*/

/*
    Creation d'une etiquette
*/

function createTag( ) {

    Foundation.utils.S( '#js-createTag' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );
        var $reveal = Foundation.utils.S( '#reveal-create_tag' );
        var title = $form.find( 'input[name="title"]' ).val( );

        $.post( $form.attr( 'action' ), $form.serialize( ), null, 'html' ).done( function( data ) {
            var html = $.parseHTML( data );
            if ( $( html ).find( '.error' ).length ) {
                $reveal.html( data );
                revealInit( $reveal );
            } else {
                Foundation.utils.S( '#js-tag_filter' ).append( ' <li><a id="' + encodeURIComponent( title ) + '" class="filter-button unselected"><i class="fa fa-circle no-pad"></i><i class="fa fa-circle-thin no-pad"></i> ' + title + '</a>' );
                Foundation.utils.S( '#js-update_target' ).empty( ).html( data );
                $reveal.foundation( 'reveal', 'close' );
                setAlertBox( 'success', $form.data( 'success_msg_pre' ) + ' « ' + title + ' » ' + $form.data( 'success_msg_post' ) );
            }
        } );

    } );
}


/*
    Suppression d'une etiquette
*/

function delTag( ) {

    Foundation.utils.S( '#js-delTag' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );
        var $updateTarget = Foundation.utils.S( '#js-update_target' );
        var $title = Foundation.utils.S( '#js-update_title' );
        var titleOrgHtml = $title.html( );

        $title.html( MSG_LOADING );

        $updateTarget.fadeTo( 200, 0.33, function( ) {

            $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {

                // Suppression du bouton de l'etiquette en JS pur car jQuery et Foundation
                // ne tolerent pas le caractere « % » dans les ID...
                var eLi = document.getElementById( document.getElementsByName( 'tag_id' )[0].value ).parentNode;
                eLi.parentNode.removeChild( eLi );

                $updateTarget.empty( ).html( data );

                $updateTarget.fadeTo( 200, 1, function( ) {

                    $title.html( titleOrgHtml );
                    setAlertBox( 'success', $form.data( 'success_msg_pre' )
                            + ' « ' + $form.data( 'tag_name' ) + ' » ' + $form.data( 'success_msg_post' ) );
                } );
            } );
        } );

    } );
}


/*
    Etiquetage d'une ressource
*/

function setResTagger( ) {

    var $form = Foundation.utils.S( '#js-resTagger' );

    _setTagSelector( $form );

    $form.submit( function( event ) {

        event.preventDefault( );
        var param = "form.submitted=1&formulaire=etiqueter";

        $form.find( 'a.selected' ).each( function( index ) {
            param += '&listeTag:list=' + encodeURIComponent( $( this ).attr( 'id' ) );
        } );

        $.post( $form.attr( 'action' ), param ).done( function( data ) {
            $( '#js-update_target' ).empty( ).html( data );
            $form.parent( '.reveal-modal' ).foundation( 'reveal', 'close' );
            setAlertBox( 'success', $form.data( 'success_msg_pre' ) + ' « ' + $form.data( 'res_name' ) + ' » ' + $form.data( 'success_msg_post' ) );
        } );

    } );
}



/***************************************************************************************************

        Traitements par lot (etiquetage / desetiquetage / suppression de ressources)

*/

function setActionBatch( ) {

    /*
        Etiquetage par lot : macro_form.pt -> etiqueter-lots
    */

    var $tagForm = Foundation.utils.S( '#tag_sel > form' );
    var $tagFormSubmit = $tagForm.find( '[type="submit"]' );

    // Bascule de selection des etiquettes
    _setTagSelector( $tagForm );

    // Activation du submit
    $tagForm.on( 'click', 'a.filter-button', function( ) {

        if ( $tagForm.find( 'a.filter-button.selected' ).length ) {
            //$tagFormSubmit.removeAttr( 'disabled' );
            $tagFormSubmit.prop( 'disabled', false );
        } else {
            //$tagFormSubmit.attr( 'disabled', "disabled" );
            $tagFormSubmit.prop( 'disabled', true );
        }

    } );

    // Affichage de la liste des ressources concernees
    $( document ).on( 'open.fndtn.reveal', '#tag_sel', function ( ) {

        $tagForm.find( '#tagPanelMessage' ).remove( );
        $tagForm.find( 'a.filter-button.selected' ).removeClass( 'selected' ).addClass( 'unselected' );
        //$tagFormSubmit.attr( 'disabled', "disabled" );
        $tagFormSubmit.prop( 'disabled', true );

        var tagMessage = "";
        var nRes = 0;

        Foundation.utils.S( '#js-update_target tbody input[name="paths:list"]:checked' ).each( function( index ) {
            tagMessage += '<li>' + $( this ).data( 'res_name' ) + '</li>';
            nRes++;
        } );

        if ( nRes > 1 ) {
            tagMessage = $tagForm.data( 'p_tag_msg' ) + '<ul>' + tagMessage + '</ul>';
        } else {
            tagMessage = $tagForm.data( 's_tag_msg' ) + '<ul>' + tagMessage + '</ul>';
        }

        $tagForm.prepend(
            $( "<div>", {
                'id': "tagPanelMessage",
                'class': "panel callout radius",
                'html': tagMessage
            } )
        );

    } );

    // Envoi des donnees du formulaire
    $tagForm.submit( function( event ) {

        event.preventDefault( );

        var param = "lots=lots";

        $tagForm.find( 'a.selected' ).each( function( index ) {
            param += '&listeTag:list=' + encodeURIComponent( $( this ).attr( 'id' ) );
        } );

        Foundation.utils.S( '#js-update_target tbody input[name="paths:list"]:checked' ).each( function( index ) {
            param += '&paths:list=' + $( this ).attr( 'value' );
        } );

        $.post( $tagForm.attr( 'action' ), param ).done( function( data ) {
            Foundation.utils.S( '#tag_sel' ).foundation( 'reveal', 'close' );
            setAlertBox( 'success', $tagForm.data( 'success_msg' ) );
        } );

    } );


    /*
        Desetiquetage par lot : macro_form.pt -> desetiqueter-lots
    */

    Foundation.utils.S( '#untag_sel > form' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );
        var tags = [ ];
        var param = "lots=lots";

        Foundation.utils.S( '#js-tag_filter a.selected' ).each( function( index ) {
            tags.push( $( this ).attr( 'id' ) );
        } );
        param += '&tagsupp=' + tags.join( );

        Foundation.utils.S( '#js-update_target tbody input[name="paths:list"]:checked' ).each( function( index ) {
            param += '&paths:list=' + $( this ).attr( 'value' );
        } );

        $.post( $form.attr( 'action' ), param ).done( function( data ) {
            $( '#js-update_target' ).empty( ).html( data );
            Foundation.utils.S( '#untag_sel' ).foundation( 'reveal', 'close' );
            setAlertBox( 'success', $form.data( 'success_msg' ) );
        } );

    } );

    // Affichage de la liste des ressources concernees
    $( document ).on( 'open.fndtn.reveal', '#untag_sel', function ( ) {

        Foundation.utils.S( '#untagPanelMessage' ).remove( );

        var $untagForm = Foundation.utils.S( '#untag_sel > form' );
        var tmpMessage = "";
        var untagMessage = "";
        var nRes = 0;

        Foundation.utils.S( '#js-tag_filter a:not(#last).selected' ).each( function( index ) {
            tmpMessage += '<li>' + $( this ).text( ) + '</li>';
        } );
        untagMessage = $untagForm.data( 'untag_msg' ) + '<ul>' + tmpMessage + '</ul>';

        tmpMessage = "";

        Foundation.utils.S( '#js-update_target tbody input[name="paths:list"]:checked' ).each( function( index ) {
            tmpMessage += '<li>' + $( this ).data( 'res_name' ) + '</li>';
            nRes++;
        } );
        if ( nRes > 1 ) {
            untagMessage = untagMessage + $untagForm.data( 'p_untag_msg' ) + '<ul>' + tmpMessage + '</ul>';
        } else {
            untagMessage = untagMessage + $untagForm.data( 's_untag_msg' ) + '<ul>' + tmpMessage + '</ul>';
        }

        $untagForm.prepend(
            $( "<div>", {
                'id': "untagPanelMessage",
                'class': "panel warning radius",
                'html': untagMessage
            } )
        );

    } );


    /*
        Suppression par lot : macro_form.pt -> supprimer-lots
    */

    Foundation.utils.S( '#del_sel > form' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );
        var nonSup = "";
        var param = $form.serialize( );

        Foundation.utils.S( '#js-update_target tbody input[name="paths:list"]:checked' ).each( function( index ) {
            if ( !$( this ).data( 'attached' ) ) {
                param += '&paths:list=' + $( this ).attr( 'value' );
            }
        } );

        $.post( $form.attr( 'action' ), param ).done( function( data ) {
            $( '#js-update_target' ).empty( ).html( data );
            Foundation.utils.S( '#del_sel' ).foundation( 'reveal', 'close' );
            setAlertBox( 'success', $form.data( 'success_msg' ) );
        } );

    } );

    // Affichage de la liste des ressources concernees
    $( document ).on( 'open.fndtn.reveal', '#del_sel', function ( ) {

        Foundation.utils.S( '#suppPanelMessage' ).remove( );
        Foundation.utils.S( '#attPanelMessage' ).remove( );

        var $delForm = Foundation.utils.S( '#del_sel > form' );
        var suppMessage = "";
        var attMessage = "";
        var nSupp = 0;
        var nAtt = 0;

        Foundation.utils.S( '#js-update_target tbody input[name="paths:list"]:checked' ).each( function( index ) {
            if ( !$( this ).data( 'attached' ) ) {
                suppMessage += '<li>' + $( this ).data( 'res_name' ) + '</li>';
                nSupp++;
            } else {
                attMessage += '<li>' + $( this ).data( 'res_name' ) + '</li>';
                nAtt++;
            }
        } );

        if ( nSupp ) {

            $delForm.find( 'div.alert' ).show( );
            //$delForm.find( '[type="submit"]' ).removeAttr( 'disabled' ).show( );
            $delForm.find( '[type="submit"]' ).prop( 'disabled', false ).show( );

            if ( nAtt ) {
                if ( nAtt > 1 ) {
                    attMessage = $delForm.data( 'p_att_msg' ) + '<ul>' + attMessage + '</ul>';
                } else {
                    attMessage = $delForm.data( 's_att_msg' ) + '<ul>' + attMessage + '</ul>';
                }
                $delForm.prepend(
                    $( "<div>", {
                        'id': "attPanelMessage",
                        'class': "panel callout radius",
                        'html': attMessage
                    } )
                );
            }

            if ( nSupp > 1 ) {
                suppMessage = $delForm.data( 'p_supp_msg' ) + '<ul>' + suppMessage + '</ul>';
            } else {
                suppMessage = $delForm.data( 's_supp_msg' ) + '<ul>' + suppMessage + '</ul>';
            }

            $delForm.prepend(
                $( "<div>", {
                    'id': "suppPanelMessage",
                    'class': "panel warning radius",
                    'html': suppMessage
                } )
            );

        } else {

            $delForm.find( 'div.alert' ).hide( );
            //$delForm.find( '[type="submit"]' ).attr( 'disabled', "disabled" ).hide( );
            $delForm.find( '[type="submit"]' ).prop( 'disabled', true ).hide( );

            suppMessage = $delForm.data( 'all_att_msg' );

            if ( nAtt > 1 ) {
                suppMessage += " " + $delForm.data( 'p_all_att_msg' );
            } else {
                suppMessage += " " + $delForm.data( 's_all_att_msg' );
            }

            $delForm.prepend(
                $( "<div>", {
                    'id': "suppPanelMessage",
                    'class': "panel warning radius",
                    'html': suppMessage
                } )
            );
        }

    } );
}



/*

        Jalon v4.5 (static) : Mes ressources


/***************************************************************************************************

        Modulation Foundation
*/

/*
    Anti plantage Firefox : pas de switches dans les listes si trop d'elements…
*/

function setSwitchMarkup( ) {

    //console.log( NB_LISTED_ELEMENTS );
    if ( NB_LISTED_ELEMENTS <= 250 ) {

        Foundation.utils.S( '#js-update_target .noSwitch' ).each( function( ) {
            $( this).removeClass( 'noSwitch' ).addClass( 'switch tiny round' );
            //$( this).removeClass( 'noSwitch' ).addClass( 'switch tiny round has-tip' ).attr( 'data-tooltip', true );
        } );
        Foundation.utils.S( '#js-update_target .list' ).foundation( 'switch', 'reflow' );
        //Foundation.utils.S( '#js-update_target .list' ).foundation( 'switch', 'reflow' ).foundation( 'tooltip', 'reflow' );
    }
}



/***************************************************************************************************

        Fichiers
*/

/*
    Edition
*/

//function setFileEditor( formID, revealID ) {
function setFileEditor( ) {

    //var $form = Foundation.utils.S( '#' + formID );
    var $form = Foundation.utils.S( '#js-fileEditor' );

    $form.find( '#title' ).attr( 'required', "required" ).attr( 'placeholder', $form.data( 'placeholder' ) );
    $form.find( '#archetypes-fieldname-file > span > span > img' ).remove( );
    $form.find( '#archetypes-fieldname-file > span > span > span.discreet > span' ).remove( );

    /* Casse l'upload de fichier...
    setRevealForm( formID, revealID ); //*/

    /*

        Upload de fichier en AJAX : http://malsup.com/jquery/form/#file-upload


    Foundation.utils.S( '#js-fileEditor' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );
        var param = $form.serialize( );

        //console.log( param );
        $.post( $form.attr( 'action' ), param ).done( function( data ) {
            $( '#js-update_target' ).empty( ).html( data );
            Foundation.utils.S( '#reveal-main ).foundation( 'reveal', 'close' );
            setAlertBox( 'success', $form.data( 'success_msg_pre' ) + " « " + $form.data( 'res_name' ) + " » " + $form.data( 'success_msg_post' ) );
        } );
    } ); //*/
}



/***************************************************************************************************

        Liens vers des ressources externes
*/

/*
    Creation d'un lien : choix du type
*/

function setLinkCreator( ) {

    Foundation.utils.S( '#js-linkCreator' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {
            var $reveal = $( '#reveal-main' );
            $reveal.empty( ).html( data );
            revealInit( $reveal );
        } );
    } );
}


/*
    Creation d'un lien a partir du catalogue de la BU
*/

function setBULinkSearch( ) {

    Foundation.utils.S( '.js-BULinkSearch' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );
        var $reveal = Foundation.utils.S( '#reveal-main' );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {
            $reveal.empty( ).html( data );
            revealInit( $reveal );
        } );
    } );
}


/*
    Creation d'un lien a partir du catalogue de la BU -> Affichage & selection
*/

function setBULinkCreator( ) {

    Foundation.utils.S( '#js-BULinkCreator' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {
            $( '#js-update_target' ).empty( ).html( data );
            Foundation.utils.S( '#reveal-main' ).foundation( 'reveal', 'close' );
            setAlertBox( 'success', $form.data( 'success_msg' ) );
        } );
    } );
}


/*
    Edition d'un lien
*/

function setLinkEditor( ) {

    var $form = Foundation.utils.S( '#js-linkEditor' );

    $form.find( '#title, #lecteur' ).attr( 'required', "required" ).attr( 'placeholder', $form.data( 'placeholder' ) );
    //$form.find( '#lecteur_text_format' ).parent( 'div' ).removeAttr( 'style' );
    $form.find( '#lecteur_text_format' ).parent( 'div' ).remove( );

    Foundation.utils.S( '#js-linkEditor' ).submit( function( event ) {

        event.preventDefault( );

        var $reveal = Foundation.utils.S( '#reveal-main' );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {
            var html = $.parseHTML( data );
            if ( $( html ).find( '.error' ).length ) {
                $reveal.empty( ).html( data );
                revealInit( $reveal );
            } else {
                $( '#js-update_target' ).empty( ).html( data );
                $reveal.foundation( 'reveal', 'close' );
                if ( $form.find( '#title' ).length ) {
                    setAlertBox( 'success', $form.data( 'success_msg_pre' ) + " « " + $form.find( '#title' ).attr( 'value' ) + " » " + $form.data( 'success_msg_post' ) );
                } else {
                    setAlertBox( 'success', $form.data( 'success_msg_pre' ) + " « " + $form.find( 'h3' ).text( ) + " » " + $form.data( 'success_msg_post' ) );
                }
            }
        } );
    } );
}



/***************************************************************************************************

        Termes de glossaire
*/

/*
    Edition
*/

function setGlossaryEditor( ) {

    var $form = Foundation.utils.S( '#js-glossaryEditor' );

    $form.find( '#title, #description' ).attr( 'required', "required" ).attr( 'placeholder', $form.data( 'placeholder' ) );

    setRevealForm( 'js-glossaryEditor', 'reveal-main' );
    /*
    var $form = Foundation.utils.S( '#js-glossaryEditor' );

    $form.find( '#title, #description' ).attr( 'required', "required" ).attr( 'placeholder', $form.data( 'placeholder' ) );

    $form.submit( function( event ) {

        event.preventDefault( );

        //var $reveal = $form.parent( '.reveal-modal' );
        var $reveal = Foundation.utils.S( '#reveal-main' );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {
            var html = $.parseHTML( data );
            if ( $( html ).find( '.fieldErrorBox' ).text( ) ) {
                $reveal.empty( ).html( data );
                revealInit( $reveal );
            } else {
                $( '#js-update_target' ).empty( ).html( data );
                $reveal.foundation( 'reveal', 'close' );
                setAlertBox( 'success', $form.data( 'success_msg_pre' ) + " « " + $form.find( '#title' ).attr( 'value' ) + " » " + $form.data( 'success_msg_post' ) );
            }
        } );
    } ); //*/
}



/***************************************************************************************************

        Operations en relation avec les ressources et les cours
*/

/*
    Supprimer une ressource / un cours
*/

function setItemSuppressor( ) {

    Foundation.utils.S( '#js-itemSuppressor' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {

            $( '#js-update_target' ).empty( ).html( data );
            $form.parent( '.reveal-modal' ).foundation( 'reveal', 'close' );
            setAlertBox( 'success', " « " + $form.data( 'item_name' ) + " » " + $form.data( 'success_msg' ) );
        } );
    } );
}



/*
    Detacher une ressource d'un ensemble de cours
*/

function setResDetacher( ) {

    var $form = Foundation.utils.S( '#js-resDetacher' );
    var $formSubmit = $form.find( '[type="submit"]' );

    //$formSubmit.attr( 'disabled', "disabled" );
    $formSubmit.prop( 'disabled', true );

    // Bascule de selection des etiquettes
    _setTagSelector( $form );

    // Activation du submit
    $form.on( 'click', 'a.filter-button', function( ) {

        if ( $form.find( 'a.filter-button.selected' ).length ) {
            //$formSubmit.removeAttr( 'disabled' );
            $formSubmit.prop( 'disabled', false );
        } else {
            //$formSubmit.attr( 'disabled', "disabled" );
            $formSubmit.prop( 'disabled', true );
        }

    } );

    $form.submit( function( event ) {

        event.preventDefault( );

        var courseNames = [ ];
        var param = $form.serialize( );

        $form.find( 'a.selected' ).each( function( index ) {
            param += '&listeCours:list=' + $( this ).attr( 'id' );
            courseNames.push( "« " + $( this ).data( 'course_name' ) + " »" );
        } );

        $.post( $form.attr( 'action' ), param ).done( function( data ) {
            $( '#js-update_target' ).empty( ).html( data );
            $form.parent( '.reveal-modal' ).foundation( 'reveal', 'close' );
            setAlertBox( 'success', $form.data( 'success_msg_pre' ) + " « " + $form.data( 'res_name' ) + " » " + $form.data( 'success_msg_post' ) + " : " + courseNames.join( ', ' ) + "." );
        } );
    } );
}



/***************************************************************************************************

        Jalon v4.5 (static) : Mes cours (staff)

*/



/***************************************************************************************************

        Liste des cours

*/


/*
    Duplication d'un cours
*/

function setCourseDuplicator( ) {

    Foundation.utils.S( '#js-courseDuplicator' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {
            Foundation.utils.S( '#js-update_target' ).empty( ).html( data );
            Foundation.utils.S( '#reveal-main' ).foundation( 'reveal', 'close' );
            setAlertBox( 'success', $form.data( 'success_msg_pre' ) + " « " + $form.data( 'course_name' ) + " » " + $form.data( 'success_msg_post' ) );
        } );
    } );
}



/*
    Filtrage des cours favoris

function setFavoritesFilter( ) {

    Foundation.utils.S( '#js-list-cours a.filter-button' ).on( 'click', function( event ) {

        event.preventDefault( );
        event.stopPropagation( );

        if ( !isRefreshing ) {

            // Verrouilage
            isRefreshing = true;

            // Init.
            var $favButton = $( this );
            var $updateTarget = Foundation.utils.S( '#js-update_target' );
            var $title = Foundation.utils.S( '#js-update_title' );
            var titleOrgHtml = $title.html( );

            // Mise a jour de l'etat / de l'url
            var hRef = $favButton.data( 'href' );
            if ( updateTagButtonState( $favButton ) ) {
                hRef += "favori";
            }

            // Requete Ajax + effets
            $title.html( MSG_LOADING );
            $updateTarget.fadeTo( 200, 0.33, function( ) {
                $updateTarget.load( hRef, function( ) {
                    $updateTarget.fadeTo( 200, 1, function( ) {
                        // Restauration titre
                        $title.html( titleOrgHtml );
                        // Forcage de la perte du focus pour le bouton (chgmt de couleur)
                        $favButton.blur( );
                        // Deverrouilage
                        isRefreshing = false;
                    } );
                } );
            } );
        }

    } );
}
*/



/*
    Bascule de cours favoris

    http://tice221.unice.fr:8080/jalon/cours/ppomedio/Cours-ppomedio-20140117155843/setFavori?fav=Oui

function setFavoriteState( ) {

    Foundation.utils.S( '#js-list-cours .list' ).on( 'click', 'a.favorite-selector', function( event ) {

        event.preventDefault( );
        event.stopPropagation( );

        if ( !isRefreshing ) {

            // Verrouilage
            isRefreshing = true;

            // Init.
            var $favSwitch = $( this );
            var $updateTarget = Foundation.utils.S( '#js-update_target' );
            var $title = Foundation.utils.S( '#js-update_title' );
            var toFavori = $favSwitch.data( 'to_favori' );
            var message = $favSwitch.data( 'success_msg_pre' ) + " « " + $favSwitch.data( 'item_name' ) + " » ";
            var titleOrgHtml = $title.html( );

            // Assemblage du message / maj attribut
            if ( toFavori === "Oui" ) {
                message += $favSwitch.data( 'success_msg_post_fav' );
            } else {
                message += $favSwitch.data( 'success_msg_post_nofav' );
            }

            // Requete Ajax + effets
            $title.html( MSG_LOADING );
            $updateTarget.fadeTo( 200, 0.33, function( ) {
                $updateTarget.load( $favSwitch.attr( 'href' ), function( ) {
                    $updateTarget.fadeTo( 200, 1, function( ) {
                        setAlertBox( 'success', message );          // Affichage du message
                        $title.html( titleOrgHtml );                // Restauration titre
                        Foundation.utils.S( '.tooltip' ).hide( );   // Masquege tooltip residuel
                        isRefreshing = false;                       // Deverrouilage
                    } );
                } );
            } );
        }

    } );
}
*/




/***************************************************************************************************

        Plan du cours

*/


/*
    Attachement d'un element de "Mon espace" hors Biblio. / Glossaire
*/

function setAttachmentCreator( ) {

    setTagFilter( true );

    Foundation.utils.S( '#js-attachmentCreator' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( url ) {
            $.get( url ).done( function( data ) {
                $( '#course_plan-plan' ).html( data );
                Foundation.utils.S( '#reveal-main-large' ).foundation( 'reveal', 'close' );
                $( document ).foundation( 'dropdown', 'reflow' );
                //$( document ).foundation( { dropdown: { align: 'left' } } );
                setAlertBox( 'success', $form.data( 'success_msg' ) );
            } );
        } );
    } );
}



/*
    Tri des elements
*/

function setSortablePlan( ) {

    if ( matchMedia( Foundation.media_queries.small ).matches
        && !matchMedia( Foundation.media_queries.medium ).matches ) {
        //setAlertBox( 'warning', "Small media detected" );
    } else {
        //setAlertBox( 'warning', "Medium & up media detected" );

        //var $coursePlan = Foundation.utils.S( '#course_plan-plan:not(.js-course_empty)' );
        var $coursePlan = Foundation.utils.S( '#course_plan-plan' );

        $coursePlan.nestedSortable( {

            items: 'li.sortable',
            //items: 'li:not(.js-course_empty)',
            tabSize: 15,
            isTree: true,
            //startCollapsed: true,
            maxLevels: 4,
            expression: '([^-=_]*)[-=_](.+)',
            //handle: 'li.sortable',
            disableNestingClass: 'element',

            update: function( event, ui ) {

                if ( !isRefreshing ) {

                    // Verrouilage
                    isRefreshing = true;

                    // Init.
                    var $title = Foundation.utils.S( '#js-update_title' );
                    var titleOrgHtml = $title.html( );

                    // Actualisation
                    $title.html( MSG_LOADING );
                    Foundation.utils.S( '.tooltip' ).hide( );
                    $coursePlan.fadeTo( 200, 0.33, function( ) {

                        $.ajax( {
                            type: "POST",
                            url: ABSOLUTE_URL + "/cours_ordonnerElementPlan",
                            dataType: "json",
                            data: {
                                plan: $coursePlan.nestedSortable( 'serialize' ),
                                classe: ui.item[ 0 ].className,
                                idAttente: ui.item[ 0 ].id
                            },
                            success: function( ) {
                                $title.html( MSG_LOADING_OK );
                                $coursePlan.delay( 600 ).fadeTo( 200, 1, function( ) {
                                    $title.html( titleOrgHtml );
                                    isRefreshing = false;
                                } );
                            }
                        } );
                    } );
                }
            }
        } );
    }
}




/***************************************************************************************************

        Acces et preferences : acces etudiants

*/


/*
    Parametrage TokenInput
*/

var tokenParams = { };

function _setTokenParams( ) {

    tokenParams = {
        minChars: 4,
        hintText: MSG_TOKEN_HINT_TEXT,
        searchingText: MSG_TOKEN_SEARCH_TEXT,
        noResultsText: MSG_TOKEN_EMPTY_TEXT,
        preventDuplicates: true
    };
}



/*
    Etudiants : inscriptions individuelles
*/

function setLDAPSearch( ) {

    _setTokenParams( );

    Foundation.utils.S( '#input-groupe' ).tokenInput(
        ABSOLUTE_URL + '/rechercherUser',
        $.extend( {}, tokenParams, {
            queryParam: 'groupe'
        } )
    );
}



/*
    Enseignants : gestion des auteurs
*/

function setAuthorMod( ) {

    _setTokenParams( );

    Foundation.utils.S( '#input-auteurs' ).tokenInput(
        ABSOLUTE_URL + '/rechercherUser',
        $.extend( {}, tokenParams, {
            queryParam: 'coauteur',
            tokenLimit: 1
        } )
    );
}



/*
    Enseignants : gestion des co-auteurs / co-lecteurs
*/

function setCoAuthorReaderMod( ) {

    _setTokenParams( );

    Foundation.utils.S( '#input-coauteurs' ).tokenInput(
        ABSOLUTE_URL + '/rechercherUser',
        $.extend( {}, tokenParams, {
            queryParam: 'coauteur'
        } )
    );
}



/*
    Inscriptions listes scolarites
*/

function setApogeeSearch( ) {

    Foundation.utils.S( '#js-Apogee_search' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );
        var $reveal = Foundation.utils.S( '#reveal-main' );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {
            $reveal.empty( ).html( data );
            revealInit( $reveal );
        } );
    } );
}




/*

        Jalon v4.5 (static) : Mes etudiants


/***************************************************************************************************

        Envoi d'un courriel a un diplome, une UE, un groupe etc.

*/

function setUESendMail( ) {

    Foundation.utils.S( '#js-UESendMail' ).submit( function( event ) {

        event.preventDefault( );

        var $form = $( this );
        var $reveal = Foundation.utils.S( '#reveal-etudiants' );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {
            var html = $.parseHTML( data );
            if ( $( html ).find( '.fieldErrorBox' ).text( ) ) {
                $reveal.empty( ).html( data );
                revealInit( $reveal );
            } else {
                $reveal.foundation( 'reveal', 'close' );
                setAlertBox( 'success', $form.data( 'success_msg' ) );
            }
        } );
    } );
}



/*

        Jalon v4.5 (static) : WIMS



/***************************************************************************************************

        Exportation d'exercices : accordeon dans formulaire

*/

function setWimsExportAccordionRadio( accordionID ) {

    var $accordion = Foundation.utils.S( '#' + accordionID );
    var $form = $accordion.parent( 'form' );
    var $submitButton = $form.children( '.formControls' ).children( '[type=submit]' );

    $accordion.on( 'toggled', function ( event, accordion ) {

        var targetID = $( this ).find( '.content.active' ).attr( 'id' );

        if ( targetID !== undefined ) {
            switchButtonEnabledState( $submitButton, true );
            Foundation.utils.S( '#js-export_format' ).prop( 'value', targetID );
            Foundation.utils.S( '#' + targetID + '_default' ).prop( 'checked', true );
        } else {
            switchButtonEnabledState( $submitButton, false );
        }
    });
}

/* Permet a la fois de fermer une fenetre modale lors d'un téléchargement,
   et d'afficher le message indiqué dans l'attribiut "data-success_msg" du formulaire. */
function closeDownloadModal( formID ) {

    var $form= Foundation.utils.S( '#' + formID );

    $form.submit( function( event ) {

        Foundation.utils.S( '#reveal-main' ).foundation( 'reveal', 'close' );
        setAlertBox( 'info', $form.data( 'success_msg' ) );
    } );
}



/***************************************************************************************************

        Creation d'un groupe d'exercices

*/

function setWimsGroupCreator( ) {

    $( document ).on( 'open.fndtn.reveal', '#group_create', function ( ) {
        /*
        var qNum = Foundation.utils.S( '#js-update_target tbody input[type="checkbox"][name="paths:list"]:checked' ).length;
        var $qNum = Foundation.utils.S( '#qnum' );
        if ( qNum > 9 ) { qNum = 9; }
        $( 'option', $qNum ).remove( );
        for ( i = 1 ; i <= qNum; i++ ) { $qNum.append( $( '<option>', { value : i, text : i } ) ); }
        */

        Foundation.utils.S( '#groupPanelMessage' ).remove( );
        Foundation.utils.S( '#noGroupPanelMessage' ).remove( );

        var $groupForm = Foundation.utils.S( '#js-wimsGroupCreator' );
        var $input;

        var groupMessage = "";
        var noGroupMessage = "";
        var nGroup = 0;
        var nNoGroup = 0;

        // Creation des elements selectionnes
        Foundation.utils.S( '#js-update_target tbody input[name="paths:list"]:checked' ).each( function( index ) {

            if ( !$( this ).data( 'no_group' ) ) {

                $input = $( "<input>", {
                    'type': "hidden",
                    'value': $( this ).val( ),
                } ).attr( 'name', "paths:list" );
                /*
                $input = $( "<input>", {
                    'type': "checkbox",
                    //'name': "paths:list",
                    'value': $( this ).val( ),
                    'checked': true,
                    'css': { 'display': 'none' },
                } ).attr( 'name', "paths:list" );
                */
                $groupForm.append( $input );

                groupMessage += '<li>' + $( this ).data( 'res_name' ) + '</li>';
                nGroup++;

            } else {

                noGroupMessage += '<li>' + $( this ).data( 'res_name' ) + '</li>';
                nNoGroup++;

            }

        } );

        // Messages d'information
        if ( nGroup ) {

            $groupForm.find( '.field' ).show( );
            //$groupForm.find( '[type="submit"]' ).removeAttr( 'disabled' ).show( );
            $groupForm.find( '[type="submit"]' ).prop( 'disabled', false ).show( );

            if ( nNoGroup ) {
                if ( nNoGroup > 1 ) {
                    noGroupMessage = $groupForm.data( 'p_no_msg' ) + '<ul>' + noGroupMessage + '</ul>';
                } else {
                    noGroupMessage = $groupForm.data( 's_no_msg' ) + '<ul>' + noGroupMessage + '</ul>';
                }
                $groupForm.prepend(
                    $( "<div>", {
                        'id': "noGroupPanelMessage",
                        'class': "panel warning radius",
                        'html': noGroupMessage
                    } )
                );
            }

            if ( nGroup > 1 ) {
                groupMessage = $groupForm.data( 'p_yes_msg' ) + '<ul>' + groupMessage + '</ul>';
            } else {
                groupMessage = $groupForm.data( 's_yes_msg' ) + '<ul>' + groupMessage + '</ul>';
            }

            $groupForm.prepend(
                $( "<div>", {
                    'id': "groupPanelMessage",
                    'class': "panel callout radius",
                    'html': groupMessage
                } )
            );

        } else {

            $groupForm.find( '.field' ).hide( );
            //$groupForm.find( '[type="submit"]' ).attr( 'disabled', "disabled" ).hide( );
            $groupForm.find( '[type="submit"]' ).prop( 'disabled', true ).hide( );

            noGroupMessage = $groupForm.data( 'all_no_msg' );

            if ( nNoGroup > 1 ) {
                noGroupMessage += " " + $groupForm.data( 'p_all_no_msg' );
            } else {
                noGroupMessage += " " + $groupForm.data( 's_all_no_msg' );
            }

            $groupForm.prepend(
                $( "<div>", {
                    'id': "groupPanelMessage",
                    'class': "panel warning radius",
                    'html': noGroupMessage
                } )
            );
        }

    } );

}



/***************************************************************************************************

        Initialisation du type d'exercice "QCM Suite"

*/

function setQCMSuite( ) {

    var suppQuestButton = Foundation.utils.S("#supprimerQuestion");

    /*
        Ajout d'une question au modele WIMS "QCM Suite"
        (question = ensemble d'input et de textareas)
    */
    Foundation.utils.S('#ajouterQuestion').on('click', function() {

        // Liste des questions
        var questionList = Foundation.utils.S('.question');

        // Nombre de questions existantes
        var n = questionList.length;

        // Clonage de la premiere question
        var firstQuestion = $(questionList[0]);
        var clonedQuestion = firstQuestion.clone();

        // Initialisation de la question clonee
        clonedQuestion.find('input, textarea').each(function() {
            // On vide la valeur
            $(this).val('');
            var name = $(this).parent().attr('data-name')+n;
            // On change le nom en ajoutant le numero
            $(this).attr('name', name);
            $(this).attr('id',  name);
        });
        clonedQuestion.find('label').each(function() {
            // On change l'attribut "for" en ajoutant le numero
            $(this).attr('for', $(this).parent().attr('data-name')+n);
        });
        clonedQuestion.find('legend').each(function() {
            // On change l'attribut "for" en ajoutant le numero
            $(this).html($(this).attr('data-titre')+(n+1));
        });

        // On l'ajoute au dom apres les autres (nombre questions = n+1)
        clonedQuestion.insertAfter($(questionList[n-1])).hide().fadeIn('slow');

        // On ajoute le lien de suppression s'il y a plus d'une question
        //if ( suppQuestButton.is(':hidden') && ( Foundation.utils.S('.question').length > 1 ) ) {
        if ( suppQuestButton.is(':hidden') && ( n > 0 ) ) {
            suppQuestButton.fadeIn();
        }

        // Maj du nombre de questions
        Foundation.utils.S('#nb_questions').val(n+1);

    });


    /*
        Supp. de la dernière question
    */
    suppQuestButton.on('click', function() {

        $('.question:last').fadeOut('slow', function() {
            $(this).remove();
            var n = Foundation.utils.S('.question').length;
            Foundation.utils.S('#nb_questions').val(n);
            // S'il y a moins de 2 questions on cache le bouton supprimer.
            if ( n < 2 ) {
                suppQuestButton.fadeOut();
            }
       });
    });

}



/***************************************************************************************************

        Mise en page CORS -> exercicewims_view_CORS.pt


function setWimsContent( ) {

    var $insertWims = Foundation.utils.S( '#insert_wims' );

    $.ajax( {
            url: $insertWims.data( 'src' ),
            async: false,
            crossDomain: true,
            cache: false,
            dataType: 'html',
            beforeSend : function ( ) {

            },
        } )
        .done( function( data ) {

            var $content = $( data ).find( '#wimspagebox' ).contents( );

            $insertWims.remove( );
            $content.find( 'p.send_answer > [type="submit"], #oef_actions span a' ).addClass( 'button small radius' );
            $( '#wims' ).append( $content );
    } );

}
*/


/***************************************************************************************************

        Edition d'un exercice


function setWimsExerciceEditor( ) {

    var $wimsEditorContainer = Foundation.utils.S( '#wims-edit' );

    // if ( $wimsEditorContainer.data( 'modele' ) !== "externe" ) { }

    // Foundation-isation : affichage de l'aide
    $wimsEditorContainer.find( 'div.field > .savoirplus_lien' ).each( function( index ) {

        var revealId = "wims-edit_reveal-" + index;

        $( this )
            .removeClass( )
            .addClass( 'button tiny radius' )
            .attr( 'data-reveal-id', revealId )
            .removeAttr( 'href' )
            .prepend( '<i class="fa fa-question"></i>' );

        $( this ).parent( 'div.field' ).find( '.savoirplus_contenu' )
            .removeClass( )
            .attr( 'id', revealId )
            .addClass( 'reveal-modal large wims-edit_reveal' )
            .attr( 'data-reveal', "data-reveal" )
            .attr( 'data-options', "close_on_background_click: true;" )
            .prepend( '<h2>' + $( this ).parent( 'div.field' ).find( 'label' ).text( ) + '<a class="close-reveal-modal"></a></h2>' );

    } );


    // Foundation-isation : param. avancés etc.
    var $accElement, $accElLink, $accElDiv;

    $wimsEditorContainer.find( 'div.savoirplus' ).each( function( index ) {

        $accElement = $( "<dd>", {
            'class': "accordion-navigation",
        } );

        var $advancedParamElement = $( this ).find( '#param_avances' );

        if ( $advancedParamElement.length > 0 ) {

            $advancedParamElement.find( 'legend' ).remove( );
            $accElLink = $( "<a>", {
                'href': "#wims_adv_opt",
                'text': "Options avancées",
            } );
            $accElDiv = $( "<div>", {
                'id': "wims_adv_opt",
                'class': "content",
            } ).html( $advancedParamElement.html( ) );

        } else {

            $accElLink = $( "<a>", {
                'href': "#wims_adv_use",
                'text': "Usages avancés",
            } );
            $accElDiv = $( "<div>", {
                'id': "wims_adv_use",
                'class': "content",
            } ).html( $( this ).find( '.savoirplus_contenu' ).html( ) );

        }

        $( this ).remove( );
        $accElement.append( $accElLink ).append( $accElDiv );
        $wimsEditorContainer.find( 'dl.accordion' ).prepend( $accElement );

    } );


    // Foundation-isation : saisies obligatoires
    $wimsEditorContainer.find( 'div.field > .fieldRequired' ).each( function( index ) {

        $( this ).parent( ).find( 'input, textarea' ).attr( 'required', "required" ).attr( 'placeholder', "Saisie obligatoire" );

    } );


    // Foundation-isation : initialisation et affichage
    $wimsEditorContainer.foundation( {
        reveal : {
            animation: 'fade',
            animation_speed: 300,
            close_on_background_click: true,
        },
        accordion: {
            active_class: 'active',
            multi_expand: false,
            toggleable: true,
        }
    } );

    $wimsEditorContainer.fadeIn( );

}
*/


/***************************************************************************************************

    Jalon v4.5 : fonctionnalités specifiques aux roles "Personnel", "Manager" et "Secretaire"

*/


/*
    Inclusions CodeKit specifiques
*/

//@codekit-prepend "static/batch.js";   // Selection par lot
//@codekit-prepend "static/tag.js";     // Etiquetage
//@codekit-prepend "static/rsc.js";     // Mes ressources
//@codekit-prepend "static/crs.js";     // Mes cours
//@codekit-prepend "static/std.js";     // Mes etudiants
//@codekit-prepend "static/wims.js";    // WIMS


/*
    Localisation datetimepicker
*/

jQuery.datetimepicker.setLocale('fr');


/***************************************************************************************************

    Gestion standard des formulaires en "reveal"

*/


/*
    Validation et rafraichissement du plan du cours :

        - ckEditorInstanceName est un ID de textarea utilisant CKEditor.

*/

function setRevealFormPlanRefresh( formID, revealID, ckEditorInstanceName ) {

    if ( typeof ckEditorInstanceName !== 'undefined' ) {
        ckEditorInstanceName = instantiateCKEditor( ckEditorInstanceName );
    } else {
        ckEditorInstanceName = false;
    }

    Foundation.utils.S( '#' + formID ).submit( function( event ) {

        if ( ckEditorInstanceName ) {
            CKEDITOR.instances[ ckEditorInstanceName ].updateElement( );
        }

        event.preventDefault( );

        var $form = $( this );
        var $reveal = Foundation.utils.S( '#' + revealID );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {

            if ( data.split( ':' )[ 0 ] === "http" ) {

                // Refresh course
                $.get( data ).done( function( coursePlanMarkup ) {
                    $( '#course_plan-plan' ).html( coursePlanMarkup );
                    $reveal.foundation( 'reveal', 'close' );
                    //$( document ).foundation( 'dropdown', 'reflow' );
                    setAlertBox( 'success', $form.data( 'success_msg' ) );
                } );

            } else {

                // Form error -> refresh popup
                $reveal.empty( ).html( data );
                revealInit( $reveal );
            }

            /*
            var html = $.parseHTML( data );
            if ( $( html ).find( '.error' ).length ) {
                $reveal.empty( ).html( data );
                revealInit( $reveal );
            } else {
                $.get( ABSOLUTE_URL + '/cours_affichage_plan' ).done( function( data ) {
                    $( '#course_plan-plan' ).html( data );
                    $reveal.foundation( 'reveal', 'close' );
                    //$( document ).foundation( 'dropdown', 'reflow' );
                    setAlertBox( 'success', $form.data( 'success_msg' ) );
                } );
            } //*/

        } );
    } );
}



/*
    Validation et rafraichissement d'un element de la page en cours

        - ckEditorInstanceName est un ID de textarea utilisant CKEditor.

*/

function setRevealForm( formID, revealID, ckEditorInstanceName ) {

    if ( typeof ckEditorInstanceName !== 'undefined' ) {
        ckEditorInstanceName = instantiateCKEditor( ckEditorInstanceName );
    } else {
        ckEditorInstanceName = false;
    }

    Foundation.utils.S( '#' + formID ).submit( function( event ) {

        if ( ckEditorInstanceName ) {
            CKEDITOR.instances[ ckEditorInstanceName ].updateElement( );
        }

        event.preventDefault( );

        $form = $( this );
        var $reveal = Foundation.utils.S( '#' + revealID );

        $.post( $form.attr( 'action' ), $form.serialize( ) ).done( function( data ) {
            var html = $.parseHTML( data );
            if ( $( html ).find( '.error' ).length ) {
                $reveal.empty( ).html( data );
                revealInit( $reveal );
            } else {
                Foundation.utils.S( '#js-update_target' ).empty( ).html( data );
                $reveal.foundation( 'reveal', 'close' );
                setAlertBox( 'success', $form.data( 'success_msg_pre' ) + " « " + $form.find( '#title' ).val( ) + " » " + $form.data( 'success_msg_post' ) );
            }
        } );
    } );
}




/***************************************************************************************************

    Formulaires

*/



/*
    Changement de label suivant etat du filtre des contenus Pod
*/

function setPodFilterSelector( ) {

    var $form = Foundation.utils.S( '#js-podFilterSelector' );
    var $searchLabel = Foundation.utils.S( '#term_search_label' );
    var $searchInput = Foundation.utils.S( '#term_search' );
    var label1 = $form.data( 'term_search_label1' );
    var label2 = $form.data( 'term_search_label2' );
    var placeholder1 = $form.data( 'term_search_placeholder1' );
    var placeholder2 = $form.data( 'term_search_placeholder2' );

    Foundation.utils.S( '#type_search' ).on( 'change', function( ) {

        if ( $( this ).val( ) === 'mes_videos' ) {
            $searchLabel.text( label2 );
            $searchInput.attr( 'placeholder', placeholder2 );
        } else {
            $searchLabel.text( label1 );
            $searchInput.attr( 'placeholder', placeholder1 );
        }

    } );

}



/*
    Selection multiple des contenus Pod
*/

function setPodContentMultipleSelection( ) {

    var $listForm = Foundation.utils.S( '#js-podContentsList' );
    var $listFormSubmit = $listForm.find( '[name="form.button.save"]' );
    var $pageChangeForm = Foundation.utils.S( '#pagination-page_number' );
    var $pageNumberInput = $pageChangeForm.find( '[name="page"]' );
    var pageChangeMessage = $pageChangeForm.data( 'page_change_msg1' ) + "\n" + $pageChangeForm.data( 'page_change_msg2' );
    var actualPageNumber = $pageNumberInput.val( );

    function _displayMessageOnPageChange( event ) {

        if ( $listForm.find( 'ul > li .switch > [type="checkbox"]:checked' ).length ) {

            if ( ! confirm( pageChangeMessage ) ) {

                event.preventDefault( );
                event.stopPropagation( );

                return false;
            }
        }

        return true;
    }

    switchButtonEnabledState( $listFormSubmit, false );

    $listForm.on( 'change', 'ul > li .switch > [type="checkbox"]', function( ) {

        if ( $listForm.find( 'ul > li .switch > [type="checkbox"]:checked' ).length ) {
            switchButtonEnabledState( $listFormSubmit, true );
        } else {
            switchButtonEnabledState( $listFormSubmit, false );
        }

    } );

    Foundation.utils.S( '#pagination-container' ).on( 'click', 'a.button', function( event ) {

        _displayMessageOnPageChange( event );
    } );

    $pageChangeForm.submit( function( event ) {

        if ( ! _displayMessageOnPageChange( event ) ) {
            $pageNumberInput.val( actualPageNumber );
        }
    } );

}



/*
    Constitution de la liste des inscriptions par courriel
*/

function setMailRegistrationForm( ) {

    var $registrationForm = Foundation.utils.S( '#js-mailRegistration' );
    var $registrationFormFieldset = $registrationForm.children( 'fieldset' );
    var $registrationFormButton = $registrationForm.find( 'button[type=submit]' );
    var registrationList = [ ];

    var $listForm = Foundation.utils.S( '#js-mailRegistrationList' );
    var $listFormFirstInput = $listForm.find( 'input[name=lastname]' );
    var $listInput = Foundation.utils.S( '#mailUserList' );

    var $listTableBody = $listForm.find( 'tbody' );
    var listTableRowHTML = '';

    var lastname = '';
    var firstname = '';
    var email = '';
    var mailUserList = '';
    var doubleCheck = false;

    function _validateUsersList( inputString ) {

        if ( ! Boolean( inputString.trim( ).length ) ) {

            return false;

        } else {

            var users = inputString.split( ',' );
            var index, len;

            users = users.filter( function( n ){ return n !== ''; } );

            for ( index = 0, len = users.length; index < len; ++index ) {

                users[ index ] = users[ index ].trim( );

                if ( users[ index ].search( '>' ) !== users[ index ].length - 1 ) {

                    return false;

                } else {

                    var userData = users[ index ].replace( '>', '' ).split( '<' );

                    if ( userData.length === 2 ) {

                        var reName = new RegExp( $listForm.find( 'input[name=lastname]' ).attr( 'pattern' ) );
                        var reMail = new RegExp( $listForm.find( 'input[name=email]' ).attr( 'pattern' ) );

                        if ( ! reName.test( userData[ 0 ] ) || ! reMail.test( userData[ 1 ] ) ) {

                            return false;
                        }

                    } else {

                        return false;
                    }
                }
            }

            return true;
        }

    }


    switchButtonEnabledState( $registrationFormButton, false );


    Foundation.utils.S( '#js-modeSwitcher' ).on( 'click', function( event ) {

        if ( $listForm.is( ':visible' ) ) {

            $listTableBody.fadeOut( 'fast', function( ) {

                $listForm.fadeOut( 'slow', function( ) {

                    $registrationFormFieldset.fadeIn( 'slow' );
                    switchButtonEnabledState( $registrationFormButton, true );
                    $listInput.focus( ).attr( 'required', "required" );
                } );
            } );

        } else {

            $registrationFormFieldset.fadeOut( 'slow', function( ) {

                $listForm.fadeIn( 'slow', function( ) {

                    $listTableBody.fadeIn( 'fast', function( ) {

                        if ( $listTableBody.find( 'tr' ).length ) {

                            switchButtonEnabledState( $registrationFormButton, true );

                        } else {

                            switchButtonEnabledState( $registrationFormButton, false );
                        }

                        $listFormFirstInput.focus( );
                        $listInput.removeAttr( 'required' );
                    } );
                } );
            } );
        }

    } );


    $registrationForm.submit( function( event ) {

        if ( $listForm.is( ':visible' ) ) {

            $listTableBody.find( 'tr' ).each( function( index ) {
                registrationList.push( $( this ).data( 'user_info' ) );
            } );

            $listInput.val( registrationList.join( ', ' ) );
            revealFormOnSubmitBehavior( $listForm );

        } else {

            if ( ! _validateUsersList( $listInput.val( ) ) ) {

                event.preventDefault( );
                $registrationFormFieldset.find( '.fieldErrorBox' ).html( MSG_FORM_VALIDATION_ERROR );

            } else {

                revealFormOnSubmitBehavior( $registrationForm );
            }
        }

    } );


    $listForm.submit( function( event ) {

        event.preventDefault( );

        firstname = $listForm.find( 'input[name=firstname]' ).val( ).trim( );
        lastname = $listFormFirstInput.val( ).trim( );
        email = $listForm.find( 'input[name=email]' ).val( ).trim( );
        mailUserList = firstname + ' ' + lastname + ' <' + email + '>';
        doubleCheck = false;

        $listForm.find( 'input' ).val( '' );

        listTableRowHTML = '<tr class="hide" data-user_info="' + mailUserList + '">';
        listTableRowHTML += '<td class="name">' + lastname + '</td><td class="name">' + firstname + '</td><td class="email">' + email + '</td><td>';
        listTableRowHTML += '<a title="Retirer de la liste"><i class="fa fa-minus-circle fa-lg fa-fw no-pad warning"></i></a></td></tr>';

        if ( ! $listTableBody.find( 'tr' ).length ) {

            $listForm.find( 'div.panel:last-child' ).slideDown( 'slow', function( ) {
                switchButtonEnabledState( $registrationFormButton, true );
            } );

        } else {

            $listTableBody.find( 'tr' ).each( function( ) {

                if ( $( this ).data( 'user_info' ) === mailUserList || $( this ).children( 'td.email' ).html( ) === email ) {

                    doubleCheck = true;
                    return false;
                }
            } );
        }

        if ( ! doubleCheck ) {

            $( listTableRowHTML ).appendTo( $listTableBody ).show( 'slow' );
            $listFormFirstInput.focus( );
        }

    } );


    $listTableBody.on( 'click', 'a', function( event ) {

        event.preventDefault( );
        event.stopPropagation( );

        $( this ).closest( 'tr' ).hide( 'slow', function( ) {

            $( this ).remove( );

            if ( ! $listTableBody.find( 'tr' ).length ) {

                $listForm.find( 'div.panel:last-child' ).slideUp( 'slow', function( ) {
                    switchButtonEnabledState( $registrationFormButton, false );
                } );
            }

            $listFormFirstInput.focus( );
        } );

    } );

}



/*
    Bascule de l'etat active / desactive d'un bouton
*/

function switchButtonEnabledState( $button, state ) {

    if ( state ) {
        $button.prop( 'disabled', false );
        //$button.removeClass( 'disabled' );
    } else {
        $button.prop( 'disabled', true );
        //$button.addClass( 'disabled' );
    }

}



/*
    Commande de l'etat active / desactive d'un bouton via checkbox
*/

function enableSubmitButtonIfCheckboxTicked( formID ) {

    var $formControls = Foundation.utils.S( '#' + formID ).children( '.formControls' );
    var $button = $formControls.children( '[type=submit]' );

    $formControls.find( '[type=checkbox]' ).on( 'click', function( event ) {

        if ( $( this ).prop( 'checked' ) ) {
            switchButtonEnabledState( $button, true );
        } else {
            switchButtonEnabledState( $button, false );
        }

    } );

}



/*
    Affichage d'un message lors de la validation d'un formulaire
*/

function displayMessageOnSubmit( formID ) {

    var $form = Foundation.utils.S( '#' + formID );
    var $formControls = $form.children( '.formControls' );
    var $messagePanel = $form.children( '.panel.hide' );

    $form.on( 'click', '[type=submit]', function( event ) {

        event.preventDefault( );
        event.stopPropagation( );

        $formControls.fadeOut( "fast", function( ) {
            $messagePanel.fadeIn( "fast", function( ) {
                $form.submit( );
            } );
        } );

    } );

}



/*
    Formulaires : pas de clics multiples
*/

function preventMultipleFormSubmits( containerID ) {

    Foundation.utils.S( '#' + containerID ).find( 'form' ).submit( function( event ) {

        $( this ).find( '[type="submit"]' ).prop( 'disabled', true );

    } );
}




/***************************************************************************************************

    Etiquettes

*/


/*
    Gestion des boutons d'etiquettes
*/

function _setTagSelector( $form ) {

    $form.on( 'click', 'a.filter-button', function( event ) {

        event.preventDefault( );
        event.stopPropagation( );

        updateTagButtonState( $( this ) );

    } );
}



/*
    Changement d'etat des boutons d'etiquettes / de favoris
*/

function updateTagButtonState( $button ) {

    if ( $button.hasClass( 'unselected' ) ) {
        $button.removeClass( 'unselected' ).addClass( 'selected' ).blur( );
        return true;
    } else if ( $button.hasClass( 'selected' ) ) {
        $button.removeClass( 'selected' ).addClass( 'unselected' ).blur( );
        return false;
    }
}




/***************************************************************************************************

    Divers

*/


/*
    Datepicker
*/

function setDateTimePicker( dateTimeID ) {
    /*
    var $picker = Foundation.utils.S( '#' + dateTimeID );
    $picker.val( $picker.val( ).substring( 0, 16 ) ); //*/

    if ( !Modernizr.inputtypes.datetime ) {

        var date = new Date();
        var year = date.getFullYear( );

        //$picker.datetimepicker( {
        Foundation.utils.S( '#' + dateTimeID ).datetimepicker( {
            //theme: 'dark',
            //closeOnDateSelect: true,
            inline: true,
            lang: 'fr',
            format: 'Y/m/d H:i',
            weeks: false,
            minDate: 0,
            step: 15,
            yearStart: year,
            yearEnd: year + 1,
            //scrollInput: false,
            //timepickerScrollbar: true,
            //scrollTime: true,
            scrollMonth: false,
            scrollYear: false,
        } );
    }

}



/*
    Rafraichissement de la liste de webconferences
*/

function refreshWebconfList( ) {

    function reloadWebconfList( ) {

        // Init. cibles
        var $updateTarget = Foundation.utils.S( '#js-update_target' );
        var $title = Foundation.utils.S( '#js-update_title' );

        // Titre initial
        var titleOrgHtml = $title.html( );

        // Requete Ajax + effets
        $title.html( MSG_LOADING );
        $updateTarget.fadeTo( 200, 0.33, function( ) {
            $updateTarget.load( window.location.pathname, function( ) {
                $updateTarget.fadeTo( 200, 1, function( ) {
                    $title.html( titleOrgHtml );    // Restauration titre
                } );
            } );
        } );

    }

    var $revealConnect = Foundation.utils.S( '#reveal-connect' );

    Foundation.utils.S( '#connect' ).on( 'click', function( event ) {
        $revealConnect.foundation( 'reveal', 'open' );
    } );

    $revealConnect.find( 'a.button' ).on( 'click', function( event ) {
        $revealConnect.foundation( 'reveal', 'close' );
        reloadWebconfList( );
    } );

}



/*
    refreshIframe : permet de remplacer la source d'une iframe par une autre.

        iframe_id represente l'id de l'iframe a rafraichir
        url fournit le lien de la page a recharger dans l'iframe
        tabsList contient une liste d'ids : le premier sera "selected", les autres ne le seront plus.
        ## pour ameliorer : on pourrait ne donner que l'id du conteneur des tabs
*/
function refreshIframe(iframe_id, url, tabsList) {
    for(var element_id in tabsList){
        if(element_id==="0"){
            document.getElementById(tabsList[element_id]).classList.add('selected');
        }else{
            document.getElementById(tabsList[element_id]).classList.remove('selected');
        }
    }
    $("#insert_wims").fadeOut();
    document.getElementById(iframe_id).src=url;
    $("#insert_wims").fadeIn();
}



